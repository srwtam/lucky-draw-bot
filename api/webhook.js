const { Client } = require('@line/bot-sdk');
require('dotenv').config({ path: './config/.env' });

// ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ LINE Bot SDK
const client = new Client({
  channelAccessToken: process.env.CHANNEL_ACCESS_TOKEN,
  channelSecret: process.env.CHANNEL_SECRET,
});

// ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
const prizes = [
  '‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 1: iPhone 15',
  '‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 2: MacBook Air',
  '‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 3: iPad Pro',
  '‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 4: ‡∏´‡∏π‡∏ü‡∏±‡∏á AirPods Pro',
  '‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 5: ‡∏ô‡∏≤‡∏¨‡∏¥‡∏Å‡∏≤ Apple Watch',
  '‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 6: ‡∏•‡∏≥‡πÇ‡∏û‡∏á JBL',
  '‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 7: ‡∏ö‡∏±‡∏ï‡∏£ Starbucks ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤ 1,000 ‡∏ö‡∏≤‡∏ó',
  '‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 8: ‡∏ö‡∏±‡∏ï‡∏£ Central Gift Card ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤ 2,000 ‡∏ö‡∏≤‡∏ó',
  '‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 9: Power Bank',
  '‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 10: ‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡πÄ‡∏õ‡πâ‡∏™‡∏∏‡∏î‡πÄ‡∏ó‡πà',
];

// ‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏∏‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß
const usersDrawn = {};

module.exports = async (req, res) => {
  if (req.method === 'POST') {
    try {
      const events = req.body.events;
      if (!events || events.length === 0) {
        return res.status(200).send('No events received');
      }

      for (const event of events) {
        if (event.type === 'message' && event.message.type === 'text') {
          const replyToken = event.replyToken;
          const userMessage = event.message.text.toLowerCase();
          const userId = event.source.userId;

          let message;

          if (userMessage === 'hybrid test') {
            if (usersDrawn[userId]) {
              message = {
                type: 'text',
                text: `‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏Ñ‡∏¢‡∏™‡∏∏‡πà‡∏°‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß: ${usersDrawn[userId]} üéÅ`,
              };
            } else {
              const availablePrizes = prizes.filter(
                (prize) => !Object.values(usersDrawn).includes(prize)
              );

              if (availablePrizes.length === 0) {
                message = {
                  type: 'text',
                  text: '‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ñ‡∏π‡∏Å‡∏™‡∏∏‡πà‡∏°‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß üéâ ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°!',
                };
              } else {
                const randomIndex = Math.floor(Math.random() * availablePrizes.length);
                const prize = availablePrizes[randomIndex];
                usersDrawn[userId] = prize;

                message = {
                  type: 'text',
                  text: `üéâ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢! ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö: ${prize}`,
                };
              }
            }
          } else {
            message = {
              type: 'text',
              text: '‡∏û‡∏¥‡∏°‡∏û‡πå "Hybrid TEST" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏∏‡πà‡∏°‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•!',
            };
          }

          await client.replyMessage(replyToken, message);
        }
      }

      return res.status(200).send('OK');
    } catch (error) {
      console.error('Error handling webhook:', error);
      return res.status(500).send('Internal Server Error');
    }
  } else {
    return res.status(404).send
